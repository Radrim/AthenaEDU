@using MongoDB.Bson;
@inject CourseService courseService
@inject ISnackbar snackbar


<MudGrid>
    <MudItem xs="6" md="5">
        <MudTextField T="string" @bind-Value="_module.Name" For="@(() => _module.Name)" Variant="Variant.Outlined" Label="Название модуль"></MudTextField>
    </MudItem>
    <MudItem xs="3" md="3">
        <MudButton OnClick="@(() => AddModule())" Class="mud-theme-primary">Сохранить модуль</MudButton>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public Course Course { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    private Module _module = new Module();

    private async Task AddModule()
    {
        if (Course != null && !string.IsNullOrEmpty(_module.Name))
        {
            bool moduleExists = Course.Modules.Any(m => m.Name == _module.Name);

            if (!moduleExists)
            {
                _module.Id = ObjectId.GenerateNewId().ToString();
                Course.Modules.Add(_module);
                await courseService.UpdateCourseAsync(Course);
                snackbar.Add("Модуль успешно создан!", Severity.Success);
                StateHasChanged();
            }

            else
            {
                snackbar.Add("Модуль с таким именем уже существует!", Severity.Error);
            }
        }
        else
        {
            snackbar.Add("Название модуля не может быть пустым!", Severity.Error);
        }
    }
}
