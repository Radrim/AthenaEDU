@page "/createCoursePage";

@inject CourseService courseService
@inject ISnackbar snackBar
@inject IDialogService DialogService

<PageTitle>Создание курса</PageTitle>

<MudGrid Justify="Justify.Center" Style="height: 80vh; width: 100vw;" Class="mt-10">
    <MudPaper Elevation="10" Style="width: 80%">
        <MudGrid Justify="Justify.Center" Class="mt-5" Style="display: flex; align-items: center;">
            <MudItem xs="6" md="5">
                <MudTextField T="string" @bind-Value="_course.Name" For="@(() => _course.Name)" Variant="Variant.Outlined" Label="Название курса"></MudTextField>
            </MudItem>

            <MudItem xs="3" md="3">
                <MudButton OnClick="CreateCourse" Class="mud-theme-primary">Создать курс</MudButton>
            </MudItem>

            <MudItem xs="12" md="12">
                <MudGrid Style="display: flex; justify-content: space-between;">
                    <MudItem xs="9" md="9" Class="ma-2 ml-5">
                        <MudList Clickable="true" Color="Color.Secondary">
                            <MudListItem Text="Модули" InitiallyExpanded="true">
                                <ChildContent>
                                    <MudText Typo="Typo.h5">Модули</MudText>
                                </ChildContent>
                                <NestedList>
                                    @foreach (var module in _modules)
                                    {
                                        <MudListItem Text="@module.Name">
                                            <NestedList>
                                                <MudListItem Text="Уроки" DisableRipple="true">
                                                    <MudTable Items="@module.Lessons" Style="width: 95%">
                                                        <HeaderContent>
                                                            <MudTh>Название урока</MudTh>
                                                            <MudTh></MudTh>
                                                            <MudTh></MudTh>
                                                            <MudTh><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenAddLessonDialog(module))">Добавить урок</MudButton></MudTh>
                                            
                                                        </HeaderContent>
                                                        <RowTemplate>
                                                            <MudTd DataLabel="Название урока">@context.Name</MudTd>
                                                            <MudTd DataLabel=" "><MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => OpenEditLessonDialog(module))">Редактировать</MudButton></MudTd>
                                                            <MudTd DataLabel=" "><MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => OpenConfirmationDialog(module, context))">Удалить</MudButton></MudTd>
                                                        </RowTemplate>
                                                    </MudTable>
                                                </MudListItem>
                                            </NestedList>
                                        </MudListItem>
                                    }
                                </NestedList>
                            </MudListItem>
                        </MudList>
                    </MudItem>

                    <MudItem xs="2" md="2" Class="ma-5">
                        <MudButton Variant="Variant.Filled" OnClick="@OpenAddModuleDialog" Color="Color.Primary">Добавить модуль</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudGrid>

@code {
    private Course _course;
    private bool courseCreated = false;
    private string imageData;

    private List<Module> _modules;

    private List<string> courseAccessibility = new List<string>()
    {
        "Открытый",
        "Приватный"
    };

    private string _selectedAccessibility;

    private List<RenderFragment> components = new List<RenderFragment>();

    protected override void OnInitialized()
    {
        _selectedAccessibility = courseAccessibility[0];
        _course = new Course();
        _modules = new List<Module>();
        //_modules = _course.Modules;

        List<Lesson> testLesson = new List<Lesson>();
        testLesson.Add(new Lesson(){Name = "Урок 1"});
        testLesson.Add(new Lesson(){Name = "Урок 2"});
        testLesson.Add(new Lesson(){Name = "Урок 3"});
        testLesson.Add(new Lesson(){Name = "Урок 4"});

        _modules.Add(new Module() { Name = "Модуль 1", Lessons = testLesson });
        _modules.Add(new Module() { Name = "Модуль 2", Lessons = testLesson });
        _modules.Add(new Module() { Name = "Модуль 3", Lessons = testLesson });
        _modules.Add(new Module() { Name = "Модуль 4", Lessons = testLesson });
    }

    private void FillModules()
    {
        _modules = _course.Modules;    
    }

    private async Task OpenConfirmationDialog(Module module, Lesson lesson)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("Action", "Delete");

        var dialogOptions = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<ConfirmDialog>("Удаление", dialogParameters, dialogOptions).Result;

        if (!dialogResult.Canceled)
        {
            module.Lessons.Remove(lesson);
            StateHasChanged();
        }
    }

    private async Task OpenAddLessonDialog(Module module)
    {
        var parameters = new DialogParameters<AddLessonDialog>();
        parameters.Add(x => x.course, _course);
        parameters.Add(x => x.module, module);
        var options = new DialogOptions { CloseOnEscapeKey = true};
        var dialog = await DialogService.ShowAsync<AddLessonDialog>("Добавление урока", parameters, options);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            StateHasChanged();
        }
    }

    private async Task OpenEditLessonDialog(Module module)
    {
        var parameters = new DialogParameters<AddLessonDialog>();
        parameters.Add(x => x.course, _course);
        parameters.Add(x => x.module, module);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddLessonDialog>("Добавление урока", parameters, options);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            StateHasChanged();
        }
    }

    private async Task OpenAddModuleDialog()
    {
        var parameters = new DialogParameters<AddLessonDialog>();
        parameters.Add(x => x.course, _course);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddModuleDialog>("Добавление модуля", parameters, options);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            _modules = _course.Modules;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var format = "image/png,jpg";
        var resizedImage = await file.RequestImageFileAsync(format, 100, 100);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        // Here you would send the imageData to your server and get the image URL
        // For example, you could use HttpClient to send the image to your server
        // and get the image URL to store in your MongoDB document
    }

    private bool isCreated()
    {
        return courseCreated;
    }

    private async Task CreateCourse()
    {
        bool success = false;
        try
        {
            if (courseService.GetCourseByName(_course.Name) == null && !String.IsNullOrEmpty(_course.Name))
            {
                await courseService.AddCourseAsync(_course);
                success = true;
                courseCreated = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при создании курса: {ex.Message}");
        }

        if (success)
        {
            snackBar.Add("Курс успешно создан!", Severity.Success);
            StateHasChanged();
        }

        else if (String.IsNullOrEmpty(_course.Name))
        {
            snackBar.Add("Название курса не может быть пустым!", Severity.Error);
        }

        else
        {
            snackBar.Add("Курс с таким названием уже существует!", Severity.Error);
        }
    }
}
