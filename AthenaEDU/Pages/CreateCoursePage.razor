@page "/createCoursePage";

@inject CourseService courseService
@inject ISnackbar snackBar
@inject IDialogService DialogService
@inject UserService userService
@inject CategoryService categoryService

<PageTitle>Создание курса</PageTitle>

<MudGrid Justify="Justify.Center" Style="height: 85vh; width: 100vw;" Class="mt-10">
    <MudPaper Elevation="10" Style="width: 80%">
        <MudGrid Justify="Justify.FlexStart" Class="mt-5" Style="display: flex; align-items: center;">
            <MudItem xs="5" md="5">
                <MudTextField Class="ml-10" T="string" @bind-Value="_course.Name" For="@(() => _course.Name)" Variant="Variant.Outlined" Label="Название курса"></MudTextField>
            </MudItem>

            <MudItem xs="4" md="4">
                <MudSelect @bind-Value="_selectedAccessibility" T="string" Label="Доступность курса" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight"
                           Variant="Variant.Filled" AdornmentColor="Color.Primary" Class="mud-theme-secondary">
                    @foreach (string item in courseAccessibility)
                    {
                        <MudSelectItem Value="@item" />
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="3" md="3">
                <MudButton OnClick="CreateCourse" Variant="Variant.Filled" Size="Size.Large" Class="ml-12" Color="Color.Primary">Создать курс</MudButton>
            </MudItem>

            <MudItem xs="5" md="5">
                    <MudTextField Label="Описание" Class="ml-10" Variant="Variant.Outlined" Lines="5" @bind-Value="_course.Description" />
            </MudItem>

            <MudItem xs="4" md="4" Class="mb-15">
                <MudSelect @bind-Value="_selectedCategory" T="CourseCategory" Label="Категория" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight"
                           Variant="Variant.Filled" AdornmentColor="Color.Primary" Class="mud-theme-secondary">
                    @foreach (CourseCategory item in _categories)
                    {
                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" md="12">
                <MudStack AlignItems="AlignItems.End" Class="ml-10" Row="true">
                    @if (fileName != "" && fileName != null)
                    {
                        <img style="height: 250px; width: 250px; background: rgba(128,128,128,0.06)" class="userImg" src="imgUser/@fileName" alt=" " />
                    }
                    @if (fileName == null)
                    {
                        <MudImage Src="images/defaultCourseImage.jpg" Alt="User image" ObjectFit="ObjectFit.Cover" Height="250" Width="250" Elevation="25" Class="rounded-lg" />
                    }

                    <label for="filePicker2" class="label">
                        <span class="title"><img class="imgtool" src="Image.svg" alt="img" /></span>
                        <InputFile id="filePicker2" accept="image/*" class="invisible" OnChange="@OnSubmit" multiple></InputFile>
                    </label>
                </MudStack>
            </MudItem>

            <MudItem xs="12" md="12">
                <MudGrid Style="display: flex; justify-content: space-between;">
                    <MudItem xs="9" md="9" Class="ma-2 ml-5">
                        <MudList Clickable="true" Color="Color.Secondary">
                            <MudListItem Text="Модули" InitiallyExpanded="true">
                                <ChildContent>
                                    <MudText Typo="Typo.h4">Модули</MudText>
                                </ChildContent>
                                <NestedList>
                                    @foreach (var module in _modules)
                                    {
                                        <MudListItem Text="@module.Name">
                                            <NestedList>
                                                <MudListItem Text="Уроки" DisableRipple="true">
                                                    <MudTable Items="@module.Lessons" Style="width: 95%">
                                                        <HeaderContent>
                                                            <MudTh>Название урока</MudTh>
                                                            <MudTh></MudTh>
                                                            <MudTh></MudTh>
                                                            <MudTh><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenAddLessonDialog(module))">Добавить урок</MudButton></MudTh>
                                            
                                                        </HeaderContent>
                                                        <RowTemplate>
                                                            <MudTd DataLabel="Название урока">@context.Name</MudTd>
                                                            <MudTd DataLabel=" "><MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => OpenEditLessonDialog(module, context))">Редактировать</MudButton></MudTd>
                                                            <MudTd DataLabel=" "><MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => OpenConfirmationDialog(module, context))">Удалить</MudButton></MudTd>
                                                        </RowTemplate>
                                                    </MudTable>
                                                </MudListItem>
                                            </NestedList>
                                        </MudListItem>
                                    }
                                </NestedList>
                            </MudListItem>
                        </MudList>
                    </MudItem>

                    <MudItem xs="2" md="2" Class="ma-5">
                        <MudButton Variant="Variant.Filled" OnClick="@OpenAddModuleDialog" Color="Color.Primary">Добавить модуль</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudGrid>


@code {
    private Course _course = new Course();
    private bool courseCreated = false;
    private string imageData;
    private string fileName;

    private List<CourseCategory> _categories = new List<CourseCategory>();
    private List<Module> _modules = new List<Module>();
    private List<string> courseAccessibility = new List<string>()
    {
        "Открытый",
        "Приватный"
    };
    private string _selectedAccessibility;
    private CourseCategory _selectedCategory;
    private List<RenderFragment> components = new List<RenderFragment>();

    protected override void OnInitialized()
    {
        _selectedAccessibility = courseAccessibility[0];
        FillCategories();

        FileSystemService.RemoveFolder("imgCourse");

        if (_course.ImageName != null)
        {
            FileSystemService.DownloadToLocalByName(_course.ImageName, "imgCourse");
            fileName = FileSystemService.GetNameOfDir("imgCourse");
            StateHasChanged();
        }


        List<Lesson> testLesson = new List<Lesson>();
        testLesson.Add(new Lesson(){Name = "Урок 1"});

        _modules.Add(new Module() { Name = "Модуль 1", Lessons = testLesson });
    }

    private async Task FillCategories()
    {
        _categories = await categoryService.GetAllCategoriesAsync();
    }

    private async Task OpenConfirmationDialog(Module module, Lesson lesson)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("Action", "Delete");

        var dialogOptions = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall};

        var dialogResult = await DialogService.Show<ConfirmDialog>("Удаление", dialogParameters, dialogOptions).Result;

        if (!dialogResult.Canceled)
        {
            module.Lessons.Remove(lesson);
            StateHasChanged();
        }
    }

    private async Task OpenAddLessonDialog(Module module)
    {
        var parameters = new DialogParameters<AddLessonDialog>();
        parameters.Add(x => x.course, _course);
        parameters.Add(x => x.module, module);
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true};
        var dialog = await DialogService.ShowAsync<AddLessonDialog>("Добавление урока", parameters, options);
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            module.Lessons.Add((res.Data as Lesson));
            StateHasChanged();
        }
    }

    private async Task OpenEditLessonDialog(Module module, Lesson lesson)
    {
        Lesson currentLesson = new Lesson() { Name = lesson.Name, LessonFile = lesson.LessonFile};
        var parameters = new DialogParameters<EditLessonDialog>();
        parameters.Add("lesson", currentLesson);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.Show<EditLessonDialog>("Редактирование урока", parameters, options).Result;

        if (!dialog.Canceled)
        {
            var newLesson = dialog.Data as Lesson;
            var oldLessonIndex = module.Lessons.FindIndex(l => l == lesson);

            if (oldLessonIndex >= 0)
            {
                module.Lessons[oldLessonIndex] = newLesson;
                StateHasChanged();
            }
        }
    }

    private async Task OpenAddModuleDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("course", _course);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.Show<AddModuleDialog>("Добавление модуля", parameters, options).Result;

        if (!dialog.Canceled)
        {
            _modules.Add((dialog.Data as Module));
            StateHasChanged();
        }
    }

    private bool isPrivate()
    {
        switch (_selectedAccessibility)
        {
            case "Приватный":
                return true;
            default:
                return false;
        }
    }

    private async Task CreateCourse()
    {
        bool success = false;
        try
        {
            if (courseService.GetCourseByName(_course.Name) == null && !String.IsNullOrEmpty(_course.Name) && _selectedCategory != null)
            {
                _course.Author = userService.CurrentUser.Name + " " + userService.CurrentUser.Patronymic;
                _course.isPrivate = isPrivate();
                _course.Modules = _modules;
                _course.Category = _selectedCategory;

                

                await courseService.AddCourseAsync(_course);
                success = true;

                if (fileName != "")
                {
                    ConfirmImage(fileName);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при создании курса: {ex.Message}");
        }

        if (success)
        {
            snackBar.Add("Курс успешно создан!", Severity.Success);
            StateHasChanged();
        }

        else if (String.IsNullOrEmpty(_course.Name))
        {
            snackBar.Add("Название курса не может быть пустым!", Severity.Error);
        }

        else if (_selectedCategory == null)
        {
            snackBar.Add("Необходимо выбрать категорию!", Severity.Error);
        }

        else
        {
            snackBar.Add("Курс с таким названием уже существует!", Severity.Error);
        }
    }

    private async Task OnSubmit(InputFileChangeEventArgs e)
    {
        String folder = "imgCourse";
        String pathFolder = $"/wwwroot/{folder}/";
        FileSystemService.RemoveFolder(folder);
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            try
            {
                Stream stream = file.OpenReadStream();
                var path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}{file.Name}";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        fileName = FileSystemService.GetNameOfDir("imgCourse");
        StateHasChanged();
    }

    private void ConfirmImage(String filename)
    {
        FileSystemService.UploadImageToDb("imgCourse");
        _course.ImageName = fileName;
        courseService.UpdateCourseAsync(_course);
    }
}
