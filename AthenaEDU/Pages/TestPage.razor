@page "/testPage"
@using MongoDB.Bson

@inject FileSystemService fileSystemService;
@inject IJSRuntime jsRuntime;

<h3>@id</h3>

<MudImage Src="@imgUrl" Height="250" Width="250" ObjectFit="ObjectFit.Cover">

</MudImage>

<InputFile OnChange="OnFileSelection">
</InputFile>

<MudText>@fileName</MudText>



<MudButton OnClick="TakeImage">Взять картинку</MudButton>
<MudButton OnClick="TakeFile">Взять документ</MudButton>

@code {
    private string imageName;
    private int maxAllowedFiles = 1;
    ObjectId id;
    string fileName;
    byte[] fileContent;
    MemoryStream fileStream;
    string imgUrl = String.Empty;

    Lesson lesson = new Lesson();

    private async Task PickImage(InputFileChangeEventArgs e)
    {

        var file = e.File;

        if (file != null)
        {
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(ms);
                byte[] fileBytes = ms.ToArray();
                fileStream = ms;
                fileName = file.Name;
                fileContent = fileBytes;

                //await fileSystemService.UploadFileToDbAsync(file.Name, fileBytes);
            }
        }
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

        fileName = e.File.Name;
        fileContent = buffers;
    }

    private async Task TakeImage()
    {
        fileContent = await fileSystemService.GetFileByName("tree.png");

        imgUrl = $"data:image;base64,{Convert.ToBase64String(fileContent)}";
        StateHasChanged();
    }

    private async Task TakeFile()
    {
        fileContent = await fileSystemService.GetFileByName("Algoritmy_i_struktury_dannyh.pdf");
        StateHasChanged();
    }
}
