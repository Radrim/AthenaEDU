@page "/registrationPage"
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager navigationManager
@inject UserService userService
@inject ISnackbar snackbar

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Style="align-items: center; height: 90vh; width: 100vw;">
        <MudItem xs="12" sm="4">
            <MudCard Elevation="5" Style="padding: 0 1rem 0 1rem">
                <MudCardContent>
                    <MudText Typo="Typo.h5" Style="font-weight: bold;" Color="Color.Primary" Align="Align.Center">РЕГИСТРАЦИЯ</MudText>
                    <MudTextField T="string" Label="Фамилия"
                    @bind-Value="model.Surname" For="@(() => model.Surname)" />

                    <MudTextField T="string" Label="Имя"
                    @bind-Value="model.Name" For="@(() => model.Name)" />
                    
                    <MudTextField T="string" Label="Отчество"
                    @bind-Value="model.Patronymic" For="@(() => model.Patronymic)" />

                    <MudTextField T="string" Label="Email" Class="mt-3"
                    @bind-Value="model.Email" For="@(() => model.Email)" InputType="InputType.Email" />

                    <MudTextField T="string" Label="Пароль" HelperText="Придумайте надежный пароль" Class="mt-3"
                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />

                    <MudTextField T="string" Label="Повторите пароль" Class="mt-3"
                    @bind-Value="model.RepeatPassword" For="@(() => model.RepeatPassword)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="ml-auto" Style="margin: 1rem" Color="Color.Dark">Зарегистрироваться</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegistrationCredentials model = new RegistrationCredentials();

    private async Task OnValidSubmit(EditContext context)
    {
        bool success = false;
        try
        {
            if (userService.GetUserByEmail(model.Email) == null)
            {
                await CreateUser();
                success = true;
                navigationManager.NavigateTo("/authPage");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при регистрации пользователя: {ex.Message}");
        }
        if (success)
        {
            snackbar.Add("Пользователь успешно зарегистрирован!", Severity.Success);
        }

        else if (userService.GetUserByEmail(model.Email) != null)
        {
            snackbar.Add("Пользователь c такой почтой уже существует!", Severity.Error);
        }

        else
        {
            snackbar.Add("При регистрации возникла ошибка!", Severity.Error);
        }
    }

    private async Task CreateUser()
    {
        await userService.AddUserAsync(new User(model.Name, model.Surname, model.Patronymic, model.Email, model.Password));
    }
}