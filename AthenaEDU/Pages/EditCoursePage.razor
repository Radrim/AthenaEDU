@page "/editCoursePage/{courseId}";

@inject CourseService courseService
@inject ISnackbar snackBar
@inject IDialogService DialogService
@inject UserService userService
@inject CategoryService categoryService
@inject FileSystemService fileSystemService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Редактирование курса</PageTitle>

<MudGrid Justify="Justify.Center" Style="height: 85vh; width: 100vw;" Class="mt-10">
    <MudPaper Elevation="10" Style="width: 80%">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="12" md="12">
                <MudTabs Elevation="4" Rounded="true" MinimumTabWidth="400px" Centered="true" Color="@Color.Primary">
                    <MudTabPanel Text="О курсе">
                        <MudGrid Justify="Justify.FlexStart">
                            <MudItem xs="4" md="4" Class="mt-10">
                                <MudStack Class="ml-10" Row="true">
                                    <MudStack AlignItems="AlignItems.End" Row="true">

                                        @if (!String.IsNullOrEmpty(imageName))
                                        {
                                            <MudImage Src="@imageName"
                                                      Width="250"
                                                      Height="250"
                                                      ObjectFit="ObjectFit.Cover"
                                                      Elevation="5"
                                                      Class="rounded-lg"></MudImage>
                                        }
                                        @if (String.IsNullOrEmpty(imageName))
                                        {
                                            <MudImage Src="images/defaultCourseImage.jpg"
                                                      Width="250"
                                                      Height="250"
                                                      ObjectFit="ObjectFit.Cover"
                                                      Elevation="5"
                                                      Class="rounded-lg"></MudImage>
                                        }

                                        <label for="filePicker2" class="label">
                                            <span class="title"><img class="imgtool" src="Image.svg" alt="select image" /></span>
                                            <InputFile id="filePicker2"
                                                       accept="image/*"
                                                       class="invisible"
                                                       OnChange="@OnFileChanged"
                                                       multiple="false">
                                            </InputFile>
                                        </label>
                                    </MudStack>
                                </MudStack>
                            </MudItem>

                            <MudItem xs="3" md="3" Class="mt-10">
                                <MudStack Spacing="4">
                                    <MudTextField T="string" @bind-Value="_course.Name" For="@(() => _course.Name)" Variant="Variant.Outlined" Label="Название курса"></MudTextField>
                                    <MudField Label="Автор" Variant="Variant.Text" Adornment="Adornment.Start">@_course.Author</MudField>
                                    <MudSelect @bind-Value="_selectedCategory" T="Category" Label="Категория" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight"
                                               Variant="Variant.Filled" AdornmentColor="Color.Primary" Class="mud-theme-secondary mt-5">
                                        @foreach (Category item in _categories)
                                        {
                                            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                            </MudItem>

                            <MudItem xs="4" md="4" Class="mt-10 ml-16">
                                <MudStack>
                                    <MudField Variant="Variant.Outlined" FullWidth="false" Label="Ключ">@_course.Id</MudField>
                                    <MudButton Variant="Variant.Filled" Size="Size.Large" Class="ml-16 mt-5 mr-16" OnClick="SaveChanges" Color="Color.Dark">Сохранить изменения</MudButton>
                                    <MudButton Variant="Variant.Filled" Size="Size.Large" Class="ml-16 mt-5 mr-16" OnClick="OpenConfirmationDialog" Color="Color.Info">Удалить курс</MudButton>
                                </MudStack>
                            </MudItem>

                            <MudItem xs="7" md="7" Class="ml-10 mt-5">
                                <MudTextField Label="Описание" Variant="Variant.Outlined" Lines="5" @bind-Value="_course.Description" />
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>

                    <MudTabPanel Text="Учебные материалы">
                        <MudGrid Justify="Justify.FlexStart">
                            <MudItem xs="9" md="9">
                                <MudGrid>
                                    <MudItem xs="12" md="12" Class="ma-2 ml-5">
                                        <MudList Clickable="true" Color="Color.Secondary">
                                            <MudListItem Text="Модули" InitiallyExpanded="true">
                                                <ChildContent>
                                                    <MudText Typo="Typo.h3">Модули</MudText>
                                                </ChildContent>
                                                <NestedList>
                                                    @foreach (var module in _course.Modules)
                                                    {
                                                        <MudListItem InitiallyExpanded="true">
                                                            <ChildContent>
                                                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                                    <MudText Typo="Typo.h5">@module.Name</MudText>
                                                                    <MudStack Row="true">                                                                    <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small" OnClick="@(() => OpenAddLessonDialog(module))">Добавить урок</MudButton>
                                                                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => OpenConfirmationDialog(module))" Color="Color.Dark" Class="mr-10">Удалить</MudButton>
                                                                    </MudStack>
                                                                </MudStack>
                                                            </ChildContent>
                                                            <NestedList>
                                                                @foreach (var lesson in module.Lessons)
                                                                {
                                                                    <MudListItem Text="@lesson.Name" DisableRipple="true">
                                                                        <ChildContent>
                                                                            <MudStack Class="ml-4 mr-5" Row="true" Justify="Justify.SpaceBetween">
                                                                                <MudText Typo="Typo.h6">@lesson.Name</MudText>

                                                                                <MudStack AlignItems="AlignItems.Start" Class="mt-3">
                                                                                    <MudStack Row="true">
                                                                                        <MudButton Variant="Variant.Outlined" Color="Color.Dark" Size="Size.Small" OnClick="@(() => OpenEditLessonDialog(module, lesson))">Редактировать</MudButton>
                                                                                        <MudButton Variant="Variant.Outlined" Color="Color.Dark" Size="Size.Small" OnClick="@(() => OpenConfirmationDialog(module, lesson))">Удалить</MudButton>
                                                                                    </MudStack>
                                                                                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                                                                        @if (lesson.LessonDocument != null)
                                                                                        {@* 
                                                                                            <MudText Typo="Typo.body1"><b>Лекция: </b></MudText>
                                                                                            <MudText Typo="Typo.subtitle1"> @lesson.LessonDocument.FileName</MudText>
                                                                                            <MudButton OnClick="@(async () =>
                                                                                                    await DownloadFile(lesson.LessonDocument.FileName, lesson.LessonDocument.FileContent))"
                                                                                                       Color="Color.Dark"
                                                                                                       Variant="Variant.Filled"
                                                                                                       Size="Size.Small">Скачать файл</MudButton> *@
                                                                                        }
                                                                                    </MudStack>

                                                                                    @if (lesson.LessonTest != null)
                                                                                    {
                                                                                        <MudButton Variant="Variant.Outlined" Color="Color.Dark" Size="Size.Large">Пройти тест</MudButton>
                                                                                    }
                                                                                </MudStack>
                                                                            </MudStack>
                                                                        </ChildContent>
                                                                    </MudListItem>
                                                                }
                                                            </NestedList>
                                                        </MudListItem>
                                                    }
                                                </NestedList>
                                            </MudListItem>
                                        </MudList>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>

                            <MudItem xs="3" md="3">
                                <MudButton Class="mt-10" Variant="Variant.Filled" OnClick="@OpenAddModuleDialog" Color="Color.Dark">Добавить модуль</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>

                    <MudTabPanel Text="Участники">

                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudGrid>


@code {
    [Parameter] public string courseId { get; set; }
    private Course _course;
    private byte[] imageContent;
    private string imageName;
    private string courseImage;

    private List<Category> _categories = new List<Category>();
    private List<string> courseAccessibility = new List<string>()
    {
        "Открытый",
        "Приватный"
    };
    private string _selectedAccessibility;
    private Category _selectedCategory = new Category();
    private List<RenderFragment> components = new List<RenderFragment>();

    protected override async void OnInitialized()
    {
        await FillCategories();

        if (!String.IsNullOrEmpty(courseId))
        {
            _course = courseService.GetCourseById(courseId);

            if (_course != null)
            {
                _selectedAccessibility = (_course.isPrivate == true ? courseAccessibility[0] : courseAccessibility[1]);


                _selectedCategory = _categories[0];

                if (_course.ImageName != null)
                {
                    imageContent = await fileSystemService.GetFileByNameAsync(_course.ImageName);
                    imageName = $"data:image;base64,{Convert.ToBase64String(imageContent)}";
                    StateHasChanged();
                }
            }
        }
    }

    private async Task FillCategories()
    {
        _categories = await categoryService.GetAllCategoriesAsync();
    }

    private async Task OpenConfirmationDialog(Module module, Lesson lesson)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("Action", "Delete");

        var dialogOptions = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<ConfirmDialog>("Удаление", dialogParameters, dialogOptions).Result;

        if (!dialogResult.Canceled)
        {
            module.Lessons.Remove(lesson);
            StateHasChanged();
        }
    }

    private async Task OpenConfirmationDialog(Module module)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("Action", "Delete");

        var dialogOptions = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<ConfirmDialog>("Удаление", dialogParameters, dialogOptions).Result;

        if (!dialogResult.Canceled)
        {
            _course.Modules.Remove(module);
            StateHasChanged();
        }
    }

    private async Task OpenConfirmationDialog()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("Action", "Delete");

        var dialogOptions = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<ConfirmDialog>("Удаление", dialogParameters, dialogOptions).Result;

        if (!dialogResult.Canceled)
        {
            await userService.DeleteCourseAsync(courseId);
            await courseService.DeleteCourseAsync(_course);
            navigationManager.NavigateTo("/myCourses");
            snackBar.Add("Курс успешно удален!", Severity.Success);
            StateHasChanged();
        }
    }

    private async Task OpenAddLessonDialog(Module module)
    {
        var parameters = new DialogParameters<AddLessonDialog>();
        parameters.Add(x => x.course, _course);
        parameters.Add(x => x.module, module);
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddLessonDialog>("Добавление урока", parameters, options);
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            module.Lessons.Add((res.Data as Lesson));
            StateHasChanged();
        }
    }

    private async Task OpenEditLessonDialog(Module module, Lesson lesson)
    {
        Lesson currentLesson = new Lesson() { Name = lesson.Name, LessonDocument = lesson.LessonDocument };
        var parameters = new DialogParameters<EditLessonDialog>();
        parameters.Add("lesson", currentLesson);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.Show<EditLessonDialog>("Редактирование урока", parameters, options).Result;

        if (!dialog.Canceled)
        {
            var newLesson = dialog.Data as Lesson;
            var oldLessonIndex = module.Lessons.FindIndex(l => l == lesson);

            if (oldLessonIndex >= 0)
            {
                module.Lessons[oldLessonIndex] = newLesson;
                StateHasChanged();
            }
        }
    }

    private async Task OpenAddModuleDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("course", _course);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.Show<AddModuleDialog>("Добавление модуля", parameters, options).Result;

        if (!dialog.Canceled)
        {
            _course.Modules.Add((dialog.Data as Module));
            StateHasChanged();
        }
    }

    private bool isPrivate()
    {
        switch (_selectedAccessibility)
        {
            case "Приватный":
                return true;
            default:
                return false;
        }
    }

    private async Task SaveChanges()
    {
        bool success = false;
        try
        {
            if (!String.IsNullOrEmpty(_course.Name) && _selectedCategory != null)
            {
                success = true;

                if (!String.IsNullOrEmpty(imageName) )
                {
                    ConfirmImage();
                }

                await courseService.UpdateCourseAsync(_course);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при создании курса: {ex.Message}");
        }

        if (success)
        {
            snackBar.Add("Курс успешно изменен!", Severity.Success);
            StateHasChanged();
        }

        else if (String.IsNullOrEmpty(_course.Name))
        {
            snackBar.Add("Название курса не может быть пустым!", Severity.Error);
        }

        else if (_selectedCategory == null)
        {
            snackBar.Add("Необходимо выбрать категорию!", Severity.Error);
        }

        else
        {
            snackBar.Add("Курс с таким названием уже существует!", Severity.Error);
        }
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 5;
        var file = e.File;
        if (file != null)
        {
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream(maxSize).CopyToAsync(ms);
                imageContent = ms.ToArray();
                courseImage = file.Name;
                imageName = $"data:image;base64,{Convert.ToBase64String(imageContent)}";
            }
        }

        StateHasChanged();
    }

    private async void ConfirmImage()
    {
        if (courseImage != null)
        {
            _course.ImageName = courseImage;
            await fileSystemService.UploadFileToDbAsync(courseImage, imageContent);
        }
    }
    
    private async Task DownloadFile(string fileName, byte[] fileContent)
    {
        if (!String.IsNullOrEmpty(fileName))
        {
            await jsRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
        }
    }
}
