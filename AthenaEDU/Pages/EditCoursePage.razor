@page "/editCoursePage/{courseId}";

@inject CourseService courseService
@inject ISnackbar snackBar
@inject IDialogService DialogService
@inject UserService userService
@inject CategoryService categoryService

<PageTitle>Создание курса</PageTitle>

<MudGrid Justify="Justify.Center" Style="height: 85vh; width: 100vw;" Class="mt-10">
    <MudPaper Elevation="10" Style="width: 80%">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="12" md="12">
                <MudTabs Elevation="4" Rounded="true" MinimumTabWidth="400px" Centered="true" Color="@Color.Primary">
                    <MudTabPanel Text="О курсе" />
                    <MudTabPanel Text="Учебные материалы" />
                    <MudTabPanel Text="Участники" />
                </MudTabs>
            </MudItem>
            <MudItem xs="3" md="3" Class="mt-10">
                <MudStack Class="ml-10" Row="true">
                    @* @if (_course.ImageName != "" && _course.ImageName != null)
                    {
                    <img style="height: 250px; width: 250px; background: rgba(128,128,128,0.06)" class="userImg" src="imgUser/@_course.ImageName" alt=" " />
                    }
                    @if (_course.ImageName == null)
                    {

                    } *@
                    <MudStack AlignItems="AlignItems.End" Row="true">

                        <MudImage Src="@_course.ImageName" Alt="User image" ObjectFit="ObjectFit.Cover" Height="250" Width="250" Elevation="25" Class="rounded-lg" />

                        <label for="filePicker2" class="label">
                            <span class="title"><img class="imgtool" src="Image.svg" alt="img" /></span>
                            <InputFile id="filePicker2" accept="image/*" class="invisible" OnChange="@OnSubmit" multiple></InputFile>
                        </label>
                    </MudStack>
                </MudStack>
            </MudItem>

            <MudItem xs="4" md="4" Class="mt-10">
                <MudStack Spacing="4">
                    <MudTextField T="string" @bind-Value="_course.Name" For="@(() => _course.Name)" Variant="Variant.Outlined" Label="Название курса"></MudTextField>
                    <MudField Label="Автор" Variant="Variant.Text" Adornment="Adornment.Start">@_course.Author</MudField>
                    <MudSelect @bind-Value="_selectedCategory" T="Category" Label="Категория" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight"
                               Variant="Variant.Filled" AdornmentColor="Color.Primary" Class="mud-theme-secondary ml-16 mt-5">
                        @foreach (Category item in _categories)
                        {
                            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudItem>

            <MudItem xs="4" md="4" Class="mt-5 ml-16">
                <MudStack>
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Class="ml-16 mt-5 mr-16" Color="Color.Dark">Сохранить изменения</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Class="ml-16 mt-5 mr-16" Color="Color.Info">Удалить курс</MudButton>
                </MudStack>
            </MudItem>

            <MudItem xs="7" md="7" Class="ml-10 mt-5">
                    <MudTextField Label="Описание" Variant="Variant.Outlined" Lines="5" @bind-Value="_course.Description" />
            </MudItem>

            @* @if (userService.CurrentUser != null && activeCourses != null)
            {
                @if (userService.CurrentUser.Role == "User")
                {
                    <MudItem xs="3" md="3">
                        <MudButton Variant="Variant.Outlined"
                                   OnClick="@(() => isActive ? JoinToCourse() : ExitFromCourse())"
                                   Color="Color.Primary"
                                   Class="mt-4 ml-10"
                                   FullWidth="true">
                            <MudText Color="Color.Primary" Typo="Typo.button">
                                @(isActive ? "Поcтупить на курс" : "Покинуть")
                            </MudText>
                        </MudButton>
                    </MudItem>
                }
            } *@

            @* <MudItem xs="12" md="12">
            <MudGrid Style="display: flex; justify-content: space-between;">
            <MudItem xs="9" md="9" Class="ma-2 ml-5">
            <MudList Clickable="true" Color="Color.Secondary">
            <MudListItem Text="Модули" InitiallyExpanded="true">
            <ChildContent>
            <MudText Typo="Typo.h4">Модули</MudText>
            </ChildContent>
            <NestedList>
            @foreach (var module in _course.Modules)
            {
            <MudListItem Text="@module.Name">
            <NestedList>
            @foreach(var lesson in module.Lessons)
            {
            <MudListItem Text="@lesson.Name" DisableRipple="true">
            <MudGrid>
            <MudItem xs="4" md="4" Class="ml-10">
            <MudText Typo="Typo.body1">@lesson.Name</MudText>
            </MudItem>
            <MudItem xs="5" md="5">
            <MudTextField Label="Теория" Class="ml-10" Variant="Variant.Outlined" Lines="5" T="string" />
            </MudItem>
            </MudGrid>
            </MudListItem>
            }
            </NestedList>
            </MudListItem>
            }
            </NestedList>
            </MudListItem>
            </MudList>
            </MudItem>
            </MudGrid>
            </MudItem> *@
        </MudGrid>
    </MudPaper>
</MudGrid>


@code {
    [Parameter] public string courseId { get; set; }
    private Course _course;
    private bool courseCreated = false;
    private string imageData;
    private string fileName;

    private List<Category> _categories = new List<Category>();
    private List<Module> _modules = new List<Module>();
    private List<string> courseAccessibility = new List<string>()
    {
        "Открытый",
        "Открытый"
    };
    private string _selectedAccessibility;
    private Category _selectedCategory = new Category();
    private List<RenderFragment> components = new List<RenderFragment>();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(courseId))
        {
            _course = courseService.GetCourseById(courseId);

            if (_course != null)
            {
                _selectedAccessibility = (_course.isPrivate == true ? courseAccessibility[0] : courseAccessibility[1]);

                FillCategories();

                _selectedCategory = _categories[0];
                var module = _course.Modules?.FirstOrDefault();

                FileSystemService.RemoveFolder("imgCourse");

                if (!string.IsNullOrEmpty(_course.ImageName))
                {
                    FileSystemService.DownloadToLocalByName(_course.ImageName, "imgCourse");
                    fileName = FileSystemService.GetNameOfDir("imgCourse");
                    StateHasChanged();
                }
            }
        }
    }

    private async Task FillCategories()
    {
        _categories = await categoryService.GetAllCategoriesAsync();
    }

    private async Task OpenConfirmationDialog(Module module, Lesson lesson)
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("Action", "Delete");

        var dialogOptions = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<ConfirmDialog>("Удаление", dialogParameters, dialogOptions).Result;

        if (!dialogResult.Canceled)
        {
            module.Lessons.Remove(lesson);
            StateHasChanged();
        }
    }

    private async Task OpenAddLessonDialog(Module module)
    {
        var parameters = new DialogParameters<AddLessonDialog>();
        parameters.Add(x => x.course, _course);
        parameters.Add(x => x.module, module);
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddLessonDialog>("Добавление урока", parameters, options);
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            module.Lessons.Add((res.Data as Lesson));
            StateHasChanged();
        }
    }

    private async Task OpenEditLessonDialog(Module module, Lesson lesson)
    {
        Lesson currentLesson = new Lesson() { Name = lesson.Name, LessonDocument = lesson.LessonDocument };
        var parameters = new DialogParameters<EditLessonDialog>();
        parameters.Add("lesson", currentLesson);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.Show<EditLessonDialog>("Редактирование урока", parameters, options).Result;

        if (!dialog.Canceled)
        {
            var newLesson = dialog.Data as Lesson;
            var oldLessonIndex = module.Lessons.FindIndex(l => l == lesson);

            if (oldLessonIndex >= 0)
            {
                module.Lessons[oldLessonIndex] = newLesson;
                StateHasChanged();
            }
        }
    }

    private async Task OpenAddModuleDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("course", _course);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.Show<AddModuleDialog>("Добавление модуля", parameters, options).Result;

        if (!dialog.Canceled)
        {
            _modules.Add((dialog.Data as Module));
            StateHasChanged();
        }
    }

    private bool isPrivate()
    {
        switch (_selectedAccessibility)
        {
            case "Приватный":
                return true;
            default:
                return false;
        }
    }

    private async Task SaveChanges()
    {
        bool success = false;
        try
        {
            if (!String.IsNullOrEmpty(_course.Name) && _selectedCategory != null)
            {
                await courseService.UpdateCourseAsync(_course);
                success = true;

                if (fileName != "")
                {
                    ConfirmImage(fileName);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при создании курса: {ex.Message}");
        }

        if (success)
        {
            snackBar.Add("Курс успешно создан!", Severity.Success);
            StateHasChanged();
        }

        else if (String.IsNullOrEmpty(_course.Name))
        {
            snackBar.Add("Название курса не может быть пустым!", Severity.Error);
        }

        else if (_selectedCategory == null)
        {
            snackBar.Add("Необходимо выбрать категорию!", Severity.Error);
        }

        else
        {
            snackBar.Add("Курс с таким названием уже существует!", Severity.Error);
        }
    }

    private async Task OnSubmit(InputFileChangeEventArgs e)
    {
        String folder = "imgCourse";
        String pathFolder = $"/wwwroot/{folder}/";
        FileSystemService.RemoveFolder(folder);
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            try
            {
                Stream stream = file.OpenReadStream();
                var path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}{file.Name}";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        fileName = FileSystemService.GetNameOfDir("imgCourse");
        StateHasChanged();
    }

    private void ConfirmImage(String filename)
    {
        FileSystemService.UploadImageToDb("imgCourse");
        _course.ImageName = fileName;
        courseService.UpdateCourseAsync(_course);
    }
}
