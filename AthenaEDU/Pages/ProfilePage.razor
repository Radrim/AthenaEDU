@page "/profilePage"
@using System.IO

@inject UserService userService
@inject ISnackbar snackbar
@inject IDialogService DialogService
@inject NavigationManager navigationManager

<EditForm Model="@_currentUser" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator />
    <MudGrid Style="height: 90vh; width: 100vw;" Class="mt-10">
        <MudItem xs="4" md="4">
            <MudGrid Justify="Justify.Center" Style="align-items: center;">
                <MudItem xs="6" md="6">
                    <MudStack>
                        @* <MudImage Src="images/defaultProfile.png" Alt="User image" ObjectFit="ObjectFit.Fill" Height="250" Width="250" Elevation="25" Class="rounded-lg" /> *@
                        @* <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 ml-2" FullWidth="true">Сменить изображение</MudButton> *@
                        
                         @if (fileName != "" && fileName != null)
                        {
                            <img style="height: 250px; width: 250px; background: rgba(128,128,128,0.06)" class="userImg" src="imgUser/@fileName" alt=" "/>
                        }
                        @if (fileName == null)
                         {
                            <MudImage Src="images/defaultProfile.png" Alt="User image" ObjectFit="ObjectFit.Fill" Height="250" Width="250" Elevation="25" Class="rounded-lg" />
                         }
                        
                        <label for="filePicker2" class="label">
                            <span class="title"><img class="imgtool" src="Image.svg" alt="img"/></span>
                                <InputFile id="filePicker2" accept="image/*" class="invisible" OnChange="@OnSubmit" multiple></InputFile>
                        </label>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="3" md="3">
            <MudGrid>
                <MudItem xs="12" md="10">
                    <MudField Label="Фамилия" Variant="Variant.Outlined" Adornment="Adornment.Start">@_currentUser.Surname</MudField>
                </MudItem>
                <MudItem xs="12" md="10">
                    <MudField Label="Имя" Variant="Variant.Outlined" Adornment="Adornment.Start">@_currentUser.Name</MudField>
                </MudItem>
                <MudItem xs="12" md="10">
                    <MudField Label="Отчество" Variant="Variant.Outlined" Adornment="Adornment.Start">@_currentUser.Patronymic</MudField>
                </MudItem>
                <MudItem xs="12" md="10">
                    <MudField Label="Email" Variant="Variant.Outlined" Adornment="Adornment.Start">@_currentUser.Email</MudField>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="2" md="2">
            <MudStack Justify="Justify.FlexStart">
                    <MudButton OnClick="@ChangePassword" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4" FullWidth="true">
                        <MudText Color="Color.Primary" Class="fw-bold" Typo="Typo.button">Сменить пароль</MudText>
                    </MudButton>

                     <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 fw-bold" FullWidth="true">Сохранить</MudButton>

                    <MudButton OnClick="@Logout" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 fw-bold" FullWidth="true">
                        <MudText Color="Color.Secondary" Class="fw-bold" Typo="Typo.button">Выйти</MudText>
                    </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private User _currentUser = new User();
    string fileName;

    protected override void OnInitialized()
    {
        _currentUser = userService.CurrentUser;
        FileSystemService.RemoveFolder("imgUser");
        
        if (_currentUser.ImageName != null)
        {
            FileSystemService.DownloadToLocalByName(_currentUser.ImageName, "imgUser");
            fileName = FileSystemService.GetNameOfDir("imgUser");
            StateHasChanged();
        }
    }

    private async Task SaveChanges()
    {
        bool success = false;
        try
        {
            await userService.UpdateUserAsync(

                _currentUser);
            success = true;
            
            if (fileName != "")
            {
                ConfirmImage(fileName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при попытке сохранить изменения: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Изменения успешно сохранены!", Severity.Success);
        }
        else
        {
            snackbar.Add("При попытке сохранить изменения возникла ошибка!", Severity.Error);
        }
    }

    // private void UploadFiles2(IBrowserFile file)
    // {
    //
    //     //TODO upload the files to the server
    // }
    
    private async Task OnSubmit(InputFileChangeEventArgs e)
    {
        String folder = "imgUser";
        String pathFolder = $"/wwwroot/{folder}/";
        FileSystemService.RemoveFolder(folder);
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            try
            {
                Stream stream = file.OpenReadStream();
                var path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}{file.Name}";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    
        fileName = FileSystemService.GetNameOfDir("imgUser");
        // if (fileName != "")
        // {
        //     ConfirmImage(fileName);
        // }
        StateHasChanged();
    }

    void ConfirmImage(String filename)
    {
        FileSystemService.UploadImageToDb("imgUser");
        _currentUser.ImageName = fileName;
        userService.UpdateUserAsync(_currentUser);
    }

    private void Logout()
    {
        userService.Logout();
        navigationManager.NavigateTo("/", forceLoad: true);
    }

    private void ChangePassword()
    {
        var parameters = new DialogParameters();
        parameters.Add("User", userService.CurrentUser);
        DialogService.Show<ChangePasswordDialog>("Смена пароля", parameters);
    }
}