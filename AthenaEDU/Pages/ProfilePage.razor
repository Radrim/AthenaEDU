@page "/profilePage"

@inject UserService userService
@inject ISnackbar snackbar
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject FileSystemService fileSystemService

<EditForm Model="@_currentUser" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator />
    <MudGrid Style="height: 90vh; width: 100vw;" Class="mt-10">
        <MudItem xs="4" md="4">
            <MudGrid Justify="Justify.Center" Style="align-items: center;">
                <MudItem xs="6" md="6">
                    <MudStack Spacing="5" Justify="Justify.SpaceAround">
                        @if (!String.IsNullOrEmpty(imageName))
                        {
                            <MudImage Src="@imageName" 
                                Alt="User image" 
                                ObjectFit="ObjectFit.Cover" 
                                Height="250" 
                                Width="250"
                                Elevation="5" 
                                Class="rounded-lg" />
                        }
                        @if (String.IsNullOrEmpty(imageName))
                        {
                            <MudImage Src="images/defaultProfile.png" 
                                Alt="User image" 
                                ObjectFit="ObjectFit.Cover" 
                                Height="250" 
                                Width="250" 
                                Elevation="5" 
                                Class="rounded-lg" />
                        }

                        <label for="filePicker2" class="label">
                            <span class="title"><img class="imgtool" src="Image.svg" alt="select image" /></span>
                            <InputFile id="filePicker2" 
                                accept="image/*" 
                                class="invisible" 
                                OnChange="@OnFileChanged" 
                                multiple="false">
                            </InputFile>
                        </label>

                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="3" md="3">
            <MudGrid>
                <MudItem xs="12" md="10">
                    <MudField Label="Фамилия" 
                        Variant="Variant.Outlined" 
                        Adornment="Adornment.Start">@_currentUser.Surname</MudField>
                </MudItem>
                <MudItem xs="12" md="10">
                    <MudField Label="Имя" 
                        Variant="Variant.Outlined" 
                        Adornment="Adornment.Start">@_currentUser.Name</MudField>
                </MudItem>
                <MudItem xs="12" md="10">
                    <MudField Label="Отчество" 
                        Variant="Variant.Outlined" 
                        Adornment="Adornment.Start">@_currentUser.Patronymic</MudField>
                </MudItem>
                <MudItem xs="12" md="10">
                    <MudField Label="Email" 
                        Variant="Variant.Outlined" 
                        Adornment="Adornment.Start">@_currentUser.Email</MudField>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="2" md="2">
            <MudStack Justify="Justify.FlexStart">
                    <MudButton OnClick="@ChangePassword" 
                        Variant="Variant.Filled" 
                        Color="Color.Dark" Class="mt-4" 
                        FullWidth="true">Сменить пароль</MudButton>

                    <MudButton ButtonType="ButtonType.Submit" 
                        Variant="Variant.Filled" 
                        Color="Color.Dark" 
                        Class="mt-4 fw-bold" 
                        FullWidth="true">Сохранить</MudButton>

                    <MudButton OnClick="@Logout" 
                        Variant="Variant.Outlined" 
                        Color="Color.Dark" 
                        Class="mt-4 fw-bold" 
                        FullWidth="true">
                       <MudText 
                           Class="fw-bold" 
                           Typo="Typo.button">Выйти</MudText>
                    </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private User _currentUser;
    private string imageName;
    private byte[] imageContent;
    private string userImage;

    protected override async void OnInitialized()
    {
        _currentUser = userService.CurrentUser;

        if (_currentUser.ImageName != null)
        {
            var fileContent = await fileSystemService.GetFileByNameAsync(_currentUser.ImageName);
            imageName = $"data:image;base64,{Convert.ToBase64String(fileContent)}";
            StateHasChanged();
        }
    }

    private async Task SaveChanges()
    {
        bool success = false;
        try
        {
            success = true;

            if (!String.IsNullOrEmpty(imageName))
            {
                ConfirmImage();
            }

            await userService.UpdateUserAsync(_currentUser);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при попытке сохранить изменения: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Изменения успешно сохранены!", Severity.Success);
        }
        else
        {
            snackbar.Add("При попытке сохранить изменения возникла ошибка!", Severity.Error);
        }
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 5;
        var file = e.File;
        if (file != null)
        {
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream(maxSize).CopyToAsync(ms);
                imageContent = ms.ToArray();
                userImage = file.Name;
                imageName = $"data:image;base64,{Convert.ToBase64String(imageContent)}";
            }
        }

        StateHasChanged();
    }

    private async void ConfirmImage()
    {
        _currentUser.ImageName = userImage;
        await fileSystemService.UploadFileToDbAsync(_currentUser.ImageName, imageContent);
    }

    private void Logout()
    {
        userService.Logout();
        navigationManager.NavigateTo("/", forceLoad: true);
    }

    private void ChangePassword()
    {
        var parameters = new DialogParameters();
        parameters.Add("User", userService.CurrentUser);
        DialogService.Show<ChangePasswordDialog>("Смена пароля", parameters);
    }
}