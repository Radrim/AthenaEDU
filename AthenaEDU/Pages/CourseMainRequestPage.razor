@page "/courseMainRequestPage/{courseId}"
@using MongoDB.Bson

@inject CourseService courseService
@inject UserService userService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

<PageTitle>@_course.Name</PageTitle>

<MudGrid Justify="Justify.Center" Style="height: 85vh; width: 100vw;" Class="mt-10">
    <MudPaper Elevation="10" Style="width: 80%">
        <MudGrid Justify="Justify.FlexStart" Class="mt-5">
            <MudItem xs="3" md="3">
                <MudStack Class="ml-10" Row="true">
                    @* @if (_course.ImageName != "" && _course.ImageName != null)
                    {
                        <img style="height: 250px; width: 250px; background: rgba(128,128,128,0.06)" class="userImg" src="imgUser/@_course.ImageName" alt=" " />
                    }
                    @if (_course.ImageName == null)
                    {
                        <MudImage Src="images/defaultCourseImage.jpg" Alt="User image" ObjectFit="ObjectFit.Cover" Height="250" Width="250" Elevation="25" Class="rounded-lg" />
                    } *@
                    <MudImage Src="images/defaultCourseImage.jpg" Alt="User image" ObjectFit="ObjectFit.Cover" Height="250" Width="250" Elevation="25" Class="rounded-lg" />
                </MudStack>
            </MudItem>

            <MudItem xs="4" md="4">
                <MudStack Spacing="4">
                    <MudField Label="Автор" Variant="Variant.Text" Adornment="Adornment.Start">@_course.Author</MudField>
                    <MudField Label="Категория" Variant="Variant.Text" Adornment="Adornment.Start">@_course.Category.Name</MudField>
                    <MudField Label="Описание" Variant="Variant.Outlined" Adornment="Adornment.Start">@_course.Description</MudField>
                </MudStack>
            </MudItem>

            @if (userService.CurrentUser != null)
            {
                <MudItem xs="3" md="3">
                    <MudStack>
                        <MudButton Variant="Variant.Outlined" OnClick="AcceptRequest" Color="Color.Primary" Class="mt-4 ml-10" FullWidth="true">
                            <MudText Color="Color.Primary" Typo="Typo.button">Принять</MudText>
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" OnClick="DeclineRequest" Color="Color.Primary" Class="mt-4 ml-10" FullWidth="true">
                            <MudText Color="Color.Primary" Typo="Typo.button">Отклонить</MudText>
                        </MudButton>
                    </MudStack>
                </MudItem>
            }
            <MudItem xs="12" md="12">
                <MudGrid Style="display: flex; justify-content: space-between;">
                    <MudItem xs="9" md="9" Class="ma-2 ml-5">
                        <MudList Clickable="true" Color="Color.Secondary">
                            <MudListItem Text="Модули" InitiallyExpanded="true">
                                <ChildContent>
                                    <MudText Typo="Typo.h4">Модули</MudText>
                                </ChildContent>
                                <NestedList>
                                    @foreach (var module in _course.Modules)
                                    {
                                        <MudListItem Text="@module.Name">
                                            <NestedList>
                                                @foreach (var lesson in module.Lessons)
                                                {
                                                    <MudListItem Text="@lesson.Name" DisableRipple="true">
                                                        <MudGrid>
                                                            <MudItem xs="4" md="4" Class="ml-10">
                                                                <MudText Typo="Typo.body1">@lesson.Name</MudText>
                                                            </MudItem>
                                                            <MudItem xs="5" md="5">
                                                                <MudTextField Label="Теория" Class="ml-10" Variant="Variant.Outlined" Lines="5" T="string" />
                                                            </MudItem>
                                                        </MudGrid>
                                                    </MudListItem>
                                                }
                                            </NestedList>
                                        </MudListItem>
                                    }
                                </NestedList>
                            </MudListItem>
                        </MudList>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudGrid>


@code {
    [Parameter]
    public string courseId { get; set; }
    private Course _course;
    private List<Lesson> lessons;
    List<Course> activeCourses;

    protected override async Task OnInitializedAsync()
    {
        if (userService.CurrentUser != null)
        {
            await GetActiveCourses();
        }
    }

    private async Task AcceptRequest()
    {
        _course.isPublished = true;
        await courseService.UpdateCourseAsync(_course);
        navigationManager.NavigateTo("/");
        snackbar.Add("Заявка одобрена!", Severity.Success);
    }

    private async Task DeclineRequest()
    {
        _course.isPublished = false;
        await courseService.UpdateCourseAsync(_course);
        navigationManager.NavigateTo("/");
        snackbar.Add("Заявка отклонена!", Severity.Success);
    }

    private async Task GetActiveCourses()
    {
        activeCourses = await userService.GetActiveCourses(userService.CurrentUser.Id);
    }

    private bool IsActive()
    {
        if (activeCourses != null && activeCourses.Contains(_course))
        {
            return true;
        }

        else
        {
            return false;
        }
    }

    protected override void OnInitialized()
    {
        // Здесь вы можете использовать параметр Id
        _course = courseService.GetCourseById(courseId);
        var module = _course.Modules.FirstOrDefault();
        if (module != null)
        {
            lessons = module.Lessons;
        }
    }
}
