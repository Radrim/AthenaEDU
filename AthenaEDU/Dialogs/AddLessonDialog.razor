@using System.IO
@inject ISnackbar snackbar
@inject CourseService courseService
@inject HttpClient Http

<MudForm Model="_model">
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="5" Class="mb-5">
                <MudItem xs="8">
                    <MudTextField T="string" Variant="Variant.Outlined" Label="Название" @bind-Value="_model.Name" For="@(() => _model.Name)"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Добавить лекцию</MudText>
                    @* <MudFileUpload T="IBrowserFile" Accept=".pdf,.txt,.docx" AppendMultipleFiles="false" MaxFileSize="10485760" OnFilesChanged="@UploadFile"> *@
                    @*     <ButtonTemplate> *@
                    @*         <MudButton HtmlTag="label" *@
                    @*                    Variant="Variant.Filled" *@
                    @*                    Color="Color.Primary" *@
                    @*                    StartIcon="@Icons.Material.Filled.CloudUpload" *@
                    @*                    for="@context.Id"> *@
                    @*                    Выбрать документ *@
                    @*         </MudButton> *@
                    @*     </ButtonTemplate> *@
                    @* </MudFileUpload> *@
                    
                    
                    <label for="filePicker2" class="label">
                        <span class="title"><img class="imgtool" src="Image.svg" alt="img"/></span>
                        <InputFile id="filePicker2" OnChange="@OnSubmit" multiple></InputFile>
                    </label>

                    @if (!String.IsNullOrEmpty(fileName))
                    {
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Custom.FileFormats.FileDocument"></MudIcon>
                            <MudText>@fileName</MudText>

                        </MudStack>
                    }
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewLesson">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Course course { get; set; }
    [Parameter] public Module module { get; set; }

    private Lesson _model;
    private string fileName;


    protected async override Task OnInitializedAsync()
    {
        _model = new Lesson();
        await base.OnInitializedAsync();
    }

    private void Close() => MudDialog.Close();

    private async Task AddNewLesson()
    {
        bool success = false;

        try
        {
            ReplaceModule();
            success = true;
            Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении урока: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Новый урок успешно добавлен!", Severity.Success);
        }
        else
        {
            snackbar.Add("При создании урока произошла ошибка!", Severity.Error);
        }
    }

    private void ReplaceModule()
    {
        module.Lessons.Add(_model);
        courseService.ReplaceModuleAsync(course, module);
    }
    
    private async Task OnSubmit(InputFileChangeEventArgs e)
    {
        String folder = "FilesLesson";
        String pathFolder = $"/wwwroot/{folder}/";
        FileSystemService.RemoveFolder(folder);
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            try
            {
                Stream stream = file.OpenReadStream();
                var path = $"{Directory.CreateDirectory(Directory.GetCurrentDirectory() + pathFolder)}{file.Name}";
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    
        fileName = FileSystemService.GetNameOfDir("FilesLesson");
    if (fileName != "")
    {
        ConfirmImage(fileName);
    }
        StateHasChanged();
    }

    void ConfirmImage(String filename)
    {
        FileSystemService.UploadImageToDb("FilesLesson");
        _model.LessonFile.FileName = fileName;
        // module.Lessons = 
        // courseService.ReplaceModuleAsync(course, module); // добавить сервис lesson 
    }
}