@inject ISnackbar snackbar
@inject CourseService courseService
@inject FileSystemService fileSystemService;
@inject IJSRuntime jsRuntime;

<MudForm Model="_lesson">
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="5" Class="mb-5">
                <MudItem xs="8">
                    <MudTextField T="string" 
                        Variant="Variant.Outlined" 
                        Label="Название" 
                        @bind-Value="_lesson.Name" 
                        For="@(() => _lesson.Name)"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-1">Добавить лекцию</MudText>
                    <MudText Typo="Typo.caption">Максимальный размер файла не должен превышать 10МБ!</MudText>
                    <InputFile id="fileInput" OnChange="FileUpload" accept=".pdf, .txt, .docx"></InputFile>   
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-1">Добавить тест</MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudContainer>
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Создание теста</MudText>
                        <MudTextField Label="Название теста" @bind-Value="test.Name" Class="mb-4" />

                        <MudText Typo="Typo.h6" Class="mb-2">Вопросы</MudText>
                        @foreach (var question in test.Questions)
                        {
                            <MudTextField Label="Текст вопроса" @bind-Value="question.Text" Class="mb-2" />
                            <MudTextField Label="Правильный ответ" @bind-Value="question.CorrectAnswer" Class="mb-2" />
                            <MudText Typo="Typo.body1" Class="mb-2">Варианты ответов</MudText>
                            @for (int i = 0; i < question.AnswerOptions.Count; i++)
                            {
                                <MudTextField T="string" Label="Вариант ответа" @bind-Value="question.AnswerOptions[i]" Class="mb-2" />
                            }
                            <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="() => AddAnswerOption(question)" Class="mb-4">Добавить вариант ответа</MudButton>
                        }
                        <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="AddQuestion" Class="mb-4">Добавить вопрос</MudButton>
                    </MudContainer>
                </MudItem>

            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close":>Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="AddNewLesson">Добавить</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Course course { get; set; }
    [Parameter] public Module module { get; set; }

    private Lesson _lesson;

    private string fileName;
    private byte[] fileContent;
    private Test test = new Test();

    protected async override Task OnInitializedAsync()
    {
        _lesson = new Lesson();
        _lesson.LessonTest = new Test();
        test.Questions = new List<Question>();
        await base.OnInitializedAsync();
    }

    private void AddQuestion()
    {
        test.Questions.Add(new Question { AnswerOptions = new List<string>() });
    }

    private void AddAnswerOption(Question question)
    {
        question.AnswerOptions.Add("");
    }

    private void Close() => MudDialog.Close(DialogResult.Cancel());
    private void CloseBySave() => MudDialog.Close(DialogResult.Ok(_lesson));

    private void AddNewLesson()
    {
        bool success = false;

        try
        {

            if (!String.IsNullOrEmpty(fileName))
            {
                Document document = new Document();
                document.FileName = fileName;
                document.FileContent = fileContent;

                _lesson.LessonDocument = document;
                _lesson.LessonTest = test;
            }

            if (!String.IsNullOrEmpty(_lesson.Name))
            {
                CloseBySave();
                success = true;
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении урока: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Новый урок успешно добавлен!", Severity.Success);
        }

        else if(!success)
        {
            snackbar.Add("Название урока не может быть пустым!", Severity.Error);
        }

        else
        {
            snackbar.Add("При создании урока произошла ошибка!", Severity.Error);
        }
    }

    private async Task FileUpload(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 10;

        if (e.File.Size <= maxSize)
        {
            var file = e.File;
            if (file != null)
            {
                using (var ms = new MemoryStream())
                {
                    await file.OpenReadStream(maxSize).CopyToAsync(ms);
                    fileContent = ms.ToArray();
                    fileName = file.Name;
                }
            }

            //await fileSystemService.UploadFileToDbAsync(fileName, fileBytes);
        }

        else
        {
            snackbar.Add("Превышен максимально допустимый размер файла (10МБ)!", Severity.Warning);
        }
    }

    private async Task DownloadFile()
    {
        if (!String.IsNullOrEmpty(fileName))
        {
            await jsRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
        }
    }
}