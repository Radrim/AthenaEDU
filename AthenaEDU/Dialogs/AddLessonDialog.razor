@inject ISnackbar snackbar
@inject CourseService courseService
@inject FileSystemService fileSystemService;
@inject IJSRuntime jsRuntime;

<MudForm Model="_lesson">
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="5" Class="mb-5">
                <MudItem xs="8">
                    <MudTextField T="string" 
                        Variant="Variant.Outlined" 
                        Label="Название" 
                        @bind-Value="_lesson.Name" 
                        For="@(() => _lesson.Name)"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-1">Добавить лекцию</MudText>
                    <MudText Typo="Typo.caption">Максимальный размер файла не должен превышать 10МБ!</MudText>
                    <InputFile id="fileInput" OnChange="FileUpload" accept=".pdf, .txt, .docx"></InputFile>   
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-1">Добавить тест</MudText>
                </MudItem>
                @* <MudButton OnClick="DownloadFile">Скачать это сраный файл</MudButton> *@

            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close":>Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewLesson">Добавить</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Course course { get; set; }
    [Parameter] public Module module { get; set; }

    private Lesson _lesson;

    private string fileName;
    private byte[] fileContent;

    protected async override Task OnInitializedAsync()
    {
        _lesson = new Lesson();
        await base.OnInitializedAsync();
    }

    private void Close() => MudDialog.Close(DialogResult.Cancel());
    private void CloseBySave() => MudDialog.Close(DialogResult.Ok(_lesson));

    private void AddNewLesson()
    {
        bool success = false;

        try
        {
            success = true;

            if (!String.IsNullOrEmpty(fileName))
            {
                Document document = new Document();
                document.FileName = fileName;
                document.FileContent = fileContent;

                _lesson.LessonDocument = document;
            }

            CloseBySave();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении урока: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Новый урок успешно добавлен!", Severity.Success);
        }

        else
        {
            snackbar.Add("При создании урока произошла ошибка!", Severity.Error);
        }
    }

    private async Task FileUpload(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 10;

        if (e.File.Size <= maxSize)
        {
            var file = e.File;
            if (file != null)
            {
                using (var ms = new MemoryStream())
                {
                    await file.OpenReadStream(maxSize).CopyToAsync(ms);
                    fileContent = ms.ToArray();
                    fileName = file.Name;
                }
            }

            //await fileSystemService.UploadFileToDbAsync(fileName, fileBytes);
        }

        else
        {
            snackbar.Add("Превышен максимально допустимый размер файла (10МБ)!", Severity.Warning);
        }
    }

    private async Task DownloadFile()
    {
        await jsRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
    }
}