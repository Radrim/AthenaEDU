@inject ISnackbar snackbar
@inject CourseService courseService
@inject FileSystemService fileSystemService;
@inject IJSRuntime jsRuntime;

<MudForm Model="_model">
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="5" Class="mb-5">
                <MudItem xs="8">
                    <MudTextField T="string" Variant="Variant.Outlined" Label="Название" @bind-Value="_model.Name" For="@(() => _model.Name)"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Добавить лекцию</MudText>
                    @* <MudFileUpload T="IBrowserFile" Accept=".pdf,.txt,.docx" AppendMultipleFiles="false" MaxFileSize="10485760" OnFilesChanged="@UploadFile">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                       Выбрать документ
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    @if (!String.IsNullOrEmpty(fileName))
                    {
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Custom.FileFormats.FileDocument"></MudIcon>
                            <MudText>@fileName</MudText>
                        </MudStack>
                    } *@

                    <InputFile OnChange="FileUpload"></InputFile>

                </MudItem>
                <MudItem xs="5" md="5">
                    <MudTextField Label="Теория" @bind-Text="fileName" Class="ml-10" Variant="Variant.Outlined" Lines="5" T="string" />
                </MudItem>

                <MudButton OnClick="DownloadFile">Скачать это сраный файл</MudButton>

            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close":>Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewLesson">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Course course { get; set; }
    [Parameter] public Module module { get; set; }

    private Lesson _model;

    private string fileName;
    private byte[] fileBytes;

    protected async override Task OnInitializedAsync()
    {
        _model = new Lesson();
        await base.OnInitializedAsync();
    }

    private void Close() => MudDialog.Close(DialogResult.Cancel());
    private void CloseBySave() => MudDialog.Close(DialogResult.Ok(_model));

    private void AddNewLesson()
    {
        bool success = false;

        try
        {
            success = true;
            CloseBySave();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении урока: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Новый урок успешно добавлен!", Severity.Success);
        }
        else
        {
            snackbar.Add("При создании урока произошла ошибка!", Severity.Error);
        }
    }

    private async Task FileUpload(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 10;
        var file = e.File;
        if (file != null)
        {
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream(maxSize).CopyToAsync(ms);
                fileBytes = ms.ToArray();
                // Теперь fileBytes содержит содержимое файла в виде массива байтов
                // Вы можете использовать fileBytes по вашему усмотрению
                fileName = file.Name;
            }
        }

        await fileSystemService.UploadFileToDbAsync(fileName, fileBytes);
    }

    private async Task DownloadFile()
    {
        await jsRuntime.InvokeVoidAsync("downloadFile", fileName, fileBytes);
    }
}