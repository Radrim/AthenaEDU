@inject ISnackbar snackbar
@inject UserService userService

<EditForm Model="_model" OnValidSubmit="@ChangePassword">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudTextField T="string" InputType="InputType.Password" Label="Старый пароль" @bind-Value="_model.OldPassword" For="@(() => _model.OldPassword)"></MudTextField>
            <MudTextField T="string" InputType="InputType.Password" Label="Новый пароль" @bind-Value="_model.NewPassword" For="@(() => _model.NewPassword)"></MudTextField>
            <MudTextField T="string" InputType="InputType.Password" Label="Повтор пароля" @bind-Value="_model.RepeatPassword" For="@(() => _model.RepeatPassword)"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public User User { get; set; }

    private ChangePasswordCredentials _model;

    protected override Task OnInitializedAsync()
    {
        _model = new ChangePasswordCredentials();
        return base.OnInitializedAsync();
    }

    private void Close() => MudDialog.Close();

    private async Task ChangePassword()
    {
        bool success = false;

        try
        {
            await userService.UpdateUserAsync(User.Id, User);
            success = true;
            Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при смене пароля: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Новый пароль успешно сохранен!", Severity.Success);
        }
        else
        {
            snackbar.Add("При сохраненни пароля произошла ошыбка!", Severity.Error);
        }
    }
}