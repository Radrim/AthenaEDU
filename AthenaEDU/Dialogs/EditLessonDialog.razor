@inject ISnackbar snackbar
@inject CourseService courseService
@inject IJSRuntime jsRuntime

<MudForm Model="lesson">
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="5" Class="mb-5">
                <MudItem xs="8">
                    <MudTextField T="string" Variant="Variant.Outlined" Label="Название" @bind-Value="lesson.Name" For="@(() => lesson.Name)"></MudTextField>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-1">Добавить лекцию</MudText>
                    <MudText Typo="Typo.caption">Максимальный размер файла не должен превышать 10МБ!</MudText>
                    <InputFile id="fileInput" OnChange="FileUpload" accept=".pdf, .txt, .docx"></InputFile>
                    <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Class="mt-5">
                        @if (!String.IsNullOrEmpty(fileName))
                        {
                            <MudText Typo="Typo.subtitle2" >@fileName</MudText>
                            <MudButton OnClick="DownloadFile" Color="Color.Dark" Variant="Variant.Filled" Size="Size.Small">Скачать файл</MudButton>
                        }
                    </MudStack>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Lesson lesson { get; set; }

    private string fileName;
    private byte[] fileContent;

    protected override void OnInitialized()
    {
        if (lesson.LessonDocument != null)
        {
            fileName = lesson.LessonDocument.FileName;
            fileContent = lesson.LessonDocument.FileContent;
        }
        base.OnInitialized();
    }

    private void Close() => MudDialog.Close(DialogResult.Cancel());
    private void CloseBySave() => MudDialog.Close(DialogResult.Ok(lesson));

    private async Task SaveChanges()
    {
        bool success = false;

        try
        {

            if (!String.IsNullOrEmpty(fileName))
            {
                Document document = new Document();
                document.FileName = fileName;
                document.FileContent = fileContent;

                lesson.LessonDocument = document;
            }

            if (!String.IsNullOrEmpty(lesson.Name))
            {
                CloseBySave();
                success = true;
            }

            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при редактировании урока: {ex.Message}");
        }

        if (success)
        {
            snackbar.Add("Урок успешно изменен!", Severity.Success);
        }

        else if (!success)
        {
            snackbar.Add("Название урока не может быть пустым!", Severity.Error);
        }

        else
        {
            snackbar.Add("При редактировании урока произошла ошибка!", Severity.Error);
        }
    }

    private async Task FileUpload(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 10;

        if (e.File.Size <= maxSize)
        {
            var file = e.File;
            if (file != null)
            {
                using (var ms = new MemoryStream())
                {
                    await file.OpenReadStream(maxSize).CopyToAsync(ms);
                    fileContent = ms.ToArray();
                    fileName = file.Name;
                }
            }
        }

        else
        {
            snackbar.Add("Превышен максимально допустимый размер файла (10МБ)!", Severity.Warning);
        }
    }

    private async Task DownloadFile()
    {
        if (!String.IsNullOrEmpty(fileName))
        {
            await jsRuntime.InvokeVoidAsync("downloadFile", fileName, fileContent);
        }
    }
}